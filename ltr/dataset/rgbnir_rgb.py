import torch
import os
import os.path
import numpy as np
import pandas
import random
from collections import OrderedDict

from ltr.data.image_loader import jpeg4py_loader
from .base_video_dataset import BaseVideoDataset
from ltr.admin.environment import env_settings

class RGBNIR_RGB(BaseVideoDataset):
    def __init__(self, root=None, image_loader=jpeg4py_loader, split=None, data_fraction=None):
        self.root = env_settings().rgbnir_rgb_dir if root is None else root
        super().__init__('RGBNIR_RGB', root, image_loader)

        # video_name for each sequence
        if split=='train':
            self.sequence_list = ['535', '333', '569', '421', '9', '602', '280', '148', '600', '97', '551', '623', '449', '572', '289', '91', '369', '592', '234', '305', '456', '584', '216', '276', '253', '523', '185', '316', '180', '556', '636', '372', '74', '364', '154', '493', '466', '611', '658', '627', '632', '10', '589', '325', '561', '618', '48', '82', '357', '113', '433', '546', '171', '24', '183', '387', '538', '353', '471', '653', '94', '178', '559', '510', '643', '11', '196', '233', '575', '641', '330', '404', '460', '613', '608', '224', '161', '106', '187', '345', '458', '552', '227', '297', '301', '639', '645', '4', '17', '16', '619', '230', '363', '617', '598', '49', '317', '630', '68', '13', '563', '34', '634', '42', '175', '269', '615', '149', '599', '647', '604', '508', '631', '315', '506', '293', '477', '354', '568', '425', '257', '339', '514', '531', '239', '351', '318', '633', '283', '52', '428', '130', '565', '298', '524', '133', '170', '66', '379', '515', '39', '358', '651', '574', '544', '543', '557', '498', '436', '169', '601', '573', '522', '496', '271', '585', '46', '597', '158', '265', '310', '469', '422', '292', '155', '648', '537', '225', '53', '656', '221', '321', '121', '383', '1', '646', '570', '470', '77', '134', '217', '146', '609', '105', '444', '95', '272', '450', '201', '65', '304', '246', '199', '184', '377', '194', '56', '207', '486', '448', '472', '640', '530', '520', '637', '291', '505', '528', '138', '62', '465', '588', '512', '571', '652', '232', '566', '518', '27', '453', '494', '461', '261', '567', '476', '596', '475', '661', '509', '168', '89', '507', '173', '555', '36', '513', '442', '614', '595', '392', '660', '644', '83', '37', '577', '536', '314', '649', '79', '501', '455', '328', '638', '642', '72', '334', '231', '485', '437', '172', '517', '564', '488', '622', '607', '390', '443', '104', '547', '236', '526', '15', '511', '441', '527', '541', '126', '388', '3', '516', '240', '329', '629', '342', '624', '193', '85', '88', '177', '606', '63', '362', '123', '429', '625', '324', '593', '366', '241', '457', '375', '344', '529', '331', '242', '548', '111', '502', '621', '590', '655', '346', '309', '355', '542', '270', '549', '299', '474', '327', '582', '587', '654', '259', '365', '545', '594', '418', '519', '464', '78', '484', '432', '312', '152', '579', '657', '399', '431', '576', '550', '93', '380', '14', '499', '268', '125', '235', '389', '368', '534', '395', '650', '616', '200', '540', '662', '75', '219', '454', '286', '603', '463', '213', '110', '605', '581', '612', '504', '248', '311', '54', '586', '208', '578', '5', '35', '181', '294', '525', '218', '71', '659', '521', '250', '402', '487', '413', '591', '302', '580', '313', '407', '558', '273', '626', '87', '583', '539', '468', '378', '319', '532', '491', '30', '73', '228', '560', '360', '212', '300', '620', '554', '25', '562', '205', '610', '23', '117', '144', '401', '164', '86', '308', '503', '359', '156', '215', '393', '274', '102', '635', '165', '553', '229', '303', '238', '478', '371']
        elif split=='test':
            self.sequence_list = ['420', '162', '251', '347', '244', '434', '44', '96', '341', '119', '417', '61', '391', '382', '135', '43', '176', '430', '33', '306', '376', '264', '128', '277', '2', '160', '101', '249', '279', '163', '495', '145', '143', '285', '394', '210', '150', '419', '98', '262', '12', '411', '424', '59', '142', '204', '497', '8', '281', '287', '222', '124', '206', '337', '252', '275', '405', '247', '90', '192', '166', '64', '367', '55', '22', '338', '202', '336', '243', '60', '122', '6', '57', '296', '103', '400', '203', '220', '386', '426', '412', '473', '467', '384', '427', '197', '114', '115', '92', '415', '290', '381', '408', '209', '258', '410', '31', '340', '237', '323', '80', '361', '45', '129', '159', '20', '452', '255', '139', '423', '356', '489', '295', '188', '479', '278', '7', '373', '47', '223', '440', '320', '349', '343', '41', '435', '51', '332', '70', '352', '414', '462', '447', '266', '282', '191', '153', '167', '108', '350', '32', '174', '109', '112', '263', '118', '50', '445', '256', '141', '245', '403', '151', '446', '147', '370', '500', '326', '416', '397', '76', '40', '490', '396', '28', '409', '398', '120', '26', '214', '38', '107', '99', '284', '260', '140', '100', '198', '322', '157', '19', '137', '483', '439', '406', '438', '58', '127', '132', '195', '481', '288', '254', '480', '335', '116', '307', '459', '131', '179', '81', '385', '67', '348', '29', '374', '21', '482', '226', '84', '492', '211', '69', '451']
        if data_fraction is not None:
            self.sequence_list = random.sample(self.sequence_list, int(len(self.sequence_list) * data_fraction))
        
    def get_name(self):
        return 'rgbnir_rgb'

    def _read_bb_anno(self, seq_path):
        bb_anno_file = os.path.join(seq_path, 'groundtruth_rect.txt')
        gt = pandas.read_csv(bb_anno_file, delimiter='\t', header=None, dtype=np.float32, na_filter=False,
                             low_memory=False).values
        return torch.tensor(gt)

    def get_sequence_info(self, seq_name):
        # seq_name = str(seq_name)
        seq_name = self.sequence_list[seq_name]
        seq_path = os.path.join(self.root, seq_name)
        bbox = self._read_bb_anno(seq_path)
        valid = (bbox[:, 2] > 0) & (bbox[:, 3] > 0)
        visible = valid.clone().byte()
        return {'bbox': bbox, 'valid': valid, 'visible': visible}

    def _get_frame(self, seq_path, frame_id):
        frame_path = os.path.join(seq_path, 'img', sorted([p for p in os.listdir(os.path.join(seq_path, 'img'))])[frame_id])
        return self.image_loader(frame_path)

    def get_frames(self, seq_name, frame_ids, anno=None):
        # seq_name = str(seq_name)
        # import pdb
        # pdb.set_trace()
        seq_name = self.sequence_list[seq_name]
        seq_path = os.path.join(self.root, seq_name)
        frame_list = [self._get_frame(seq_path, f) for f in frame_ids]
        if anno is None:
            anno = self.get_sequence_info(seq_path)

        anno_frames = {}
        for key, value in anno.items():
            anno_frames[key] = [value[f_id, ...].clone() for f_id in frame_ids]

        object_meta = OrderedDict({'object_class_name': None,
                                   'motion_class': None,
                                   'major_class': None,
                                   'root_class': None,
                                   'motion_adverb': None})

        #return frame_list_v, frame_list_i, anno_frames, object_meta
        return frame_list, anno_frames, object_meta
