import torch
import os
import os.path
import numpy as np
import pandas
import random
from collections import OrderedDict

from ltr.data.image_loader import jpeg4py_loader
from .base_video_dataset import BaseVideoDataset
from ltr.admin.environment import env_settings

class RGBNIR_NIR(BaseVideoDataset):
    def __init__(self, root=None, image_loader=jpeg4py_loader, split=None, data_fraction=None):
        self.root = env_settings().rgbnir_nir_dir if root is None else root
        super().__init__('RGBNIR_NIR', root, image_loader)

        # video_name for each sequence
        if split=='train':
            self.sequence_list = ['636', '643', '625', '508', '113', '301', '15', '466', '498', '156', '611', '586', '421', '110', '491', '388', '106', '37', '286', '5', '513', '525', '550', '375', '627', '646', '600', '364', '71', '146', '178', '577', '184', '494', '652', '177', '390', '196', '560', '229', '606', '619', '221', '593', '493', '514', '267', '11', '603', '393', '9', '201', '75', '325', '105', '63', '259', '257', '53', '597', '488', '528', '293', '653', '553', '432', '399', '268', '175', '144', '134', '487', '542', '522', '486', '213', '532', '616', '46', '458', '576', '580', '521', '605', '506', '579', '351', '443', '199', '218', '570', '363', '433', '250', '68', '224', '578', '253', '549', '187', '545', '548', '642', '24', '454', '461', '369', '387', '574', '355', '94', '607', '534', '334', '449', '236', '562', '469', '165', '212', '552', '587', '610', '239', '194', '584', '425', '418', '556', '588', '10', '657', '402', '615', '547', '371', '182', '599', '362', '17', '152', '503', '477', '227', '173', '360', '4', '558', '582', '617', '344', '626', '656', '270', '630', '564', '659', '468', '95', '168', '624', '585', '299', '48', '567', '395', '327', '475', '628', '485', '422', '66', '240', '456', '602', '608', '512', '331', '509', '25', '436', '639', '598', '649', '235', '407', '181', '655', '102', '23', '190', '641', '648', '328', '612', '457', '65', '216', '73', '596', '531', '78', '561', '635', '225', '283', '455', '30', '72', '36', '609', '450', '358', '437', '1', '215', '321', '638', '662', '289', '566', '111', '149', '300', '502', '86', '42', '431', '298', '39', '276', '535', '428', '365', '185', '324', '463', '505', '555', '353', '93', '89', '660', '339', '543', '272', '601', '330', '170', '345', '540', '372', '292', '366', '126', '158', '329', '164', '83', '496', '464', '640', '448', '13', '524', '645', '87', '632', '501', '207', '661', '620', '618', '231', '507', '634', '515', '359', '125', '557', '294', '413', '161', '269', '583', '519', '248', '82', '389', '79', '536', '613', '241', '474', '233', '117', '520', '238', '54', '565', '62', '472', '516', '538', '637', '499', '217', '568', '471', '621', '572', '533', '647', '333', '539', '56', '529', '34', '441', '629', '537', '154', '530', '484', '148', '234', '658', '594', '242', '121', '569', '444', '291', '155', '573', '205', '518', '200', '478', '16', '74', '453', '544', '591', '592', '571', '208', '368', '27', '273', '49', '380', '559', '3', '35', '589', '232', '541', '265', '633', '476', '91', '650', '404', '172', '228', '551', '470', '274', '88', '401', '77', '651', '169', '563', '554', '383', '186', '271', '97', '654', '357', '604', '180', '527', '104', '14', '429', '230', '246', '392', '465', '378', '504', '511', '189', '510', '644', '183', '130', '575', '297', '377', '623', '595', '193', '52', '442', '546', '590', '460', '342', '219', '280', '622', '138', '354', '123', '581', '346', '171']
        elif split=='test':
            self.sequence_list = ['481', '398', '382', '2', '20', '76', '112', '203', '96', '153', '38', '284', '434', '18', '435', '262', '391', '198', '348', '337', '245', '163', '361', '341', '191', '142', '210', '396', '408', '244', '417', '473', '427', '21', '98', '275', '447', '323', '6', '338', '349', '255', '423', '33', '490', '69', '347', '287', '410', '400', '415', '492', '139', '167', '59', '40', '159', '7', '119', '211', '115', '467', '336', '409', '80', '81', '243', '202', '282', '26', '426', '120', '279', '290', '43', '419', '451', '223', '214', '254', '188', '440', '31', '118', '122', '135', '340', '64', '320', '141', '278', '459', '147', '70', '129', '162', '326', '445', '84', '381', '439', '414', '136', '277', '352', '19', '480', '420', '32', '335', '489', '128', '247', '343', '373', '412', '438', '249', '411', '479', '206', '264', '29', '67', '251', '397', '483', '12', '416', '350', '150', '295', '322', '61', '367', '288', '195', '370', '45', '127', '107', '176', '51', '394', '151', '100', '424', '482', '386', '376', '124', '58', '332', '374', '446', '237', '405', '452', '192', '99', '28', '57', '462', '108', '55', '256', '500', '143', '204', '50', '220', '103', '266', '296', '281', '430', '384', '60', '116', '47', '140', '160', '92', '22', '258', '101', '495', '285', '90', '137', '114', '157', '109', '209', '385', '403', '356', '260', '406', '497', '8', '197', '41', '174', '166', '179', '132', '252', '44', '131', '222', '145']
        if data_fraction is not None:
            self.sequence_list = random.sample(self.sequence_list, int(len(self.sequence_list) * data_fraction))
        
    def get_name(self):
        return 'rgbnir_nir'

    def _read_bb_anno(self, seq_path):
        bb_anno_file = os.path.join(seq_path, 'groundtruth_rect.txt')
        gt = pandas.read_csv(bb_anno_file, delimiter='\t', header=None, dtype=np.float32, na_filter=False,
                             low_memory=False).values
        return torch.tensor(gt)

    def get_sequence_info(self, seq_name):
        seq_name = self.sequence_list[seq_name]
        seq_path = os.path.join(self.root, seq_name)
        bbox = self._read_bb_anno(seq_path)
        valid = (bbox[:, 2] > 0) & (bbox[:, 3] > 0)
        visible = valid.clone().byte()
        return {'bbox': bbox, 'valid': valid, 'visible': visible}

    def _get_frame(self, seq_path, frame_id):
        frame_path = os.path.join(seq_path, 'img', sorted([p for p in os.listdir(os.path.join(seq_path, 'img'))])[frame_id])
        # print(frame_path)
        return self.image_loader(frame_path)

    def get_frames(self, seq_name, frame_ids, anno=None):
        seq_name = self.sequence_list[seq_name]
        seq_path = os.path.join(self.root, seq_name)
        frame_list = [self._get_frame(seq_path, f) for f in frame_ids]
        # print(frame_ids)
        if anno is None:
            anno = self.get_sequence_info(seq_path)

        anno_frames = {}
        for key, value in anno.items():
            anno_frames[key] = [value[f_id, ...].clone() for f_id in frame_ids]

        object_meta = OrderedDict({'object_class_name': None,
                                   'motion_class': None,
                                   'major_class': None,
                                   'root_class': None,
                                   'motion_adverb': None})

        #return frame_list_v, frame_list_i, anno_frames, object_meta
        return frame_list, anno_frames, object_meta
